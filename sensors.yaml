# Weather prediction
# - platform: yr
#   monitored_conditions:
#       - temperature
#       - symbol
#       - precipitation
#       - windSpeed
#       - pressure
#       - windDirection
#       - humidity
#       - fog
#       - cloudiness
#       - lowClouds
#       - mediumClouds
#       - highClouds
#       - dewpointTemperature
# - platform: file
  # file_path: /scripts/misc/data/season.txt
  #name: Season_checker
- platform: file
  name: Mean Temp
  file_path: /etc/avdagic.net/smhi_temp.json
  value_template: "{{ value_json.temp | float }}"
  unit_of_measurement: °C
- platform: file
  name: Mean Temp Day
  file_path: /etc/avdagic.net/smhi_temp.json
  value_template: "{{ value_json.date }}"
  #value_template: "{{ strptime(value_json.date,'%Y-%m-%d') - strptime(states('input_datetime.season_date'),'%Y-%m-%d') }}"
  unit_of_measurement: days
- platform: file
  name: Season_checker
  file_path: /scripts/misc/data/season.txt
  value_template: "{{ value_json.season }}"
# - platform: file
  # name: Season_checker
  # file_path: /scripts/misc/data/season.txt
  # value_template: "{{ value_json.season }}"
  
- platform: template
  sensors:
    season_days:
      unit_of_measurement: days
      value_template: "{{ strptime(states('sensor.mean_temp_day'),'%Y-%m-%d').toordinal() - strptime(states('input_datetime.season_date'),'%Y-%m-%d').toordinal() }}"
    # kitchen_plug_amps:
      # friendly_name_template: "{{ states.switch.kitchen_plug.name}} Current"
      # value_template: '{{ states.switch.kitchen_plug.attributes["current_a"] | float }}'
      # unit_of_measurement: 'A'
    # kitchen_plug_watts:
      # friendly_name_template: "{{ states.switch.kitchen_plug.name}} Current Consumption"
      # value_template: '{{ states.switch.kitchen_plug.attributes["current_power_w"] | float }}'
      # unit_of_measurement: 'W'
    # kitchen_plug_total_kwh:
      # friendly_name_template: "{{ states.switch.kitchen_plug.name}} Total Consumption"
      # value_template: '{{ states.switch.kitchen_plug.attributes["total_energy_kwh"] | float }}'
      # unit_of_measurement: 'kWh'
    # kitchen_plug_volts:
      # friendly_name_template: "{{ states.switch.kitchen_plug.name}} Voltage"
      # value_template: '{{ states.switch.kitchen_plug.attributes["voltage"] | float }}'
      # unit_of_measurement: 'V'
    # kitchen_plug_today_kwh:
      # friendly_name_template: "{{ states.switch.kitchen_plug.name}} Today's Consumption"
      # value_template: '{{ states.switch.kitchen_plug.attributes["today_energy_kwh"] | float }}'
      # unit_of_measurement: 'kWh'

# - platform: template
  # sensors:
    # season_date:
      # friendly_name: "Season changed"
      # value_template: >
        # "{% if is_state("sensor.season_checker", "Winter") %}
        # {{ (now().fromordinal((now().toordinal() | int ) - 8)).strftime("%d/%m %Y") }}
        # {% else %}
        # {{ (now().fromordinal((now().toordinal() | int ) - 6)).strftime("%d/%m %Y") }}
        # {% endif %}"
  

#Check remaining dayts on certificate
# - platform: cert_expiry
#   host: avdagic.net
#   name: ANet

# Plex Activiy
#- platform: plex
#  host: 192.168.5.2
#  username: !secret plex_user
#  password: !secret plex_pass

#Current Version
- platform: version

#Check uptime
- platform: uptime

#Speed
#- platform: speedtest
#  monitored_conditions:
#    - ping
#    - download
#    - upload

#Netdata
#- platform: netdata
#  resources:
#    load15:
#      data_group: system.load
#      element: load15
#    cpu:
#      data_group: system.cpu
#      element: system
#    freeram:
#      data_group: system.ram
#      element: free
#    usedram:
#      data_group: system.ram
#      element: used
#    cachedram:
#      data_group: system.ram
#      element: cached
#    Boot:
#      data_group: disk_space._
#      element: avail
#    Media:
#      data_group: disk_space._media_plex
#      element: avail
#    Cloud:
#      data_group: disk_space._media_srv
#      element: avail
#    "System CPU":
#      data_group: system.cpu
#      element: system
#    "IOWait":
#      data_group: system.cpu
#      element: iowait
#    "User":
#       data_group: system.cpu:
#       element: user
#    system.load:
#      element: load15
#      name: "Load 15"
#    system.ram:
#      element: free
#      name: "Free RAM"
#    system.ram:
#      element: used
#    disk_space._:
#      element: avail
#      name: "Boot Drive"
#    disk_space._media_4khdr:
#      element: avail
#      name: "4KHDR"
#    disk_space._media_srv:
#      element: avail
#      name: "Server"
#    - memory_free
#    - memory_used
#    - system_load
#    - disk_free
#    - cpu_iowait
#    - cpu_user
#    - cpu_system

#Hue
- platform: rest
  resource: !secret living_room_temp
  value_template: '{{ value_json.state.temperature | float / 100 }}'
  unit_of_measurement: °C
  name: 'Living Room Temperature'
- platform: rest
  resource: !secret living_room_lux
  value_template: '{{ value_json.state.lightlevel }}'
  unit_of_measurement: Lux
  name: 'Living Room Light'
- platform: rest
  resource: !secret living_room_motion
  value_template: '{{ value_json.state.presence }}'
  name: 'Living Room Motion'
  scan_interval: 0.1
- platform: rest
  resource: !secret hallway_temp
  value_template: '{{ value_json.state.temperature | float / 100 }}'
  unit_of_measurement: °C
  name: 'Bed Room Temperature'
- platform: rest
  resource: !secret hallway_lux
  value_template: '{{ value_json.state.lightlevel }}'
  unit_of_measurement: Lux
  name: 'Bed Room Light'
- platform: rest
  resource: !secret hallway_motion
  value_template: '{{ value_json.state.presence }}'
  name: 'Bed Room Motion'
  scan_interval: 0.1
  
#Spotify
- platform: template
  sensors:
    spotify_volume:
      friendly_name: "Spotify Volume"
      value_template: "{{ states.media_player.spotify.attributes.volume_level }}"
- platform: template
  sensors:
    spotify_shuffle:
      friendly_name: "Spotify Shuffle"
      value_template: "{{ states.media_player.spotify.attributes.shuffle }}"
- platform: template
  sensors:
    spotify_source:
      friendly_name: "Spotify Source"
      value_template: "{{ states.media_player.spotify.attributes.source }}"
      
#Alarm
#- platform: template
#  sensors:
#    alarm_time:
#      friendly_name: 'Time'
#      value_template: '{{ states.input_slider.alarm_time_h.state }}:{{ states.input_slider.alarm_time_m.state }}'
#Time Sensor      
- platform: time_date
  display_options:
  - 'time'
  - 'date'

#SpaceX
#Starman
#- platform: rest
#  name: Starman
#  json_attributes:
#    - earth_distance_km
#  value_template: '{{ value_json["speed_kph"] }}'
#  unit_of_measurement: "km/h"
#  resource: 'https://api.spacexdata.com/v2/info/roadster'
#Next Rocket Launch
#- platform: rest
#  name: SpaceX
#  json_attributes:
#    - mission_name
#    - launch_site
#    - rocket
#  value_template: '{{ value_json["launch_date_unix"] }}'
#  resource: 'https://api.spacexdata.com/v2/launches/next'
#Sensors
#- platform: template
#  sensors:
#    starman_speed:
#      friendly_name: 'Starman Speed'
#      value_template: '{{ states.sensor.starman.state | round(0) }}'
#      unit_of_measurement: 'km/h'
#    starman_earth_distance:
#      friendly_name: 'Starman Earthdistance'
#      value_template: '{{ (states.sensor.starman.attributes["earth_distance_km"] | multiply(0.000001)) | round(2) }}'
#      unit_of_measurement: 'km x10⁶'
#    spacex_next_launch_day:
#      friendly_name: 'Date'
#      value_template: '{{ states.sensor.spacex.state | int | timestamp_custom("%d/%m %Y")}}'
#    spacex_next_launch_time:
#      friendly_name: 'Time'
#      value_template: '{{ states.sensor.spacex.state | int | timestamp_custom("%H:%M")}}'
#    spacex_next_rocket:
#      friendly_name: 'Rocket'
#      value_template: '{{ states.sensor.spacex.attributes["rocket"]["rocket_name"] }}'
#    spacex_next_launch_site:
#      friendly_name: 'Launchsite'
#      value_template: '{{ states.sensor.spacex.attributes["launch_site"]["site_name_long"] }}'
#    spacex_next_mission_name:
#      friendly_name: 'Mission'
#      value_template: '{{ states.sensor.spacex.attributes["mission_name"] }}'


- platform: tautulli
  api_key: !secret plexpy
  host: 192.168.5.2      
      
- platform: sonarr
  host: 192.168.5.2
  api_key: !secret sonarr
  monitored_conditions:
    - upcoming
    - series
    - wanted
    - queue
  days: 1
- platform: radarr
  host: 192.168.5.2
  api_key: !secret radarr
  monitored_conditions:
    - upcoming
    - movies
  days: 7
#- platform: deluge
#  host: 192.168.5.2
#  username: !secret deluge_user
#  password: !secret deluge_pass
#  monitored_variables:
#    - 'current_status'
#    - 'download_speed'
#    - 'upload_speed'
# - platform: transmission
  # host: 192.168.5.2
  # username: !secret transmission_user
  # password: !secret transmission_pass
  # scan_interval: 30
  # monitored_conditions:
    # - current_status
    # - download_speed
    # - upload_speed
    # - active_torrents
    # - paused_torrents
    # - total_torrents
    # - started_torrents
    # - completed_torrents    

    
    
# - platform: seventeentrack
#   username: !secret 17track_user
#   password: !secret 17track_pass

#- platform: pollenkoll
#  sensors:
#    - city: Norrkoping
#      state: Al
#      state: Alm
#      state: Ambrosia
#      state: Björk
#      state: Bok
#      state: Ek
#      state: Gräs
#      state: Gråbo
#      state: Hassel
#      state: Sälg
